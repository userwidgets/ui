/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { model } from "./model";
import { Notice } from "smoothly";
import { CustomOption } from "./components/user/permission-update/index";
export namespace Components {
    interface UserwidgetsChangeName {
        "name": model.userwidgets.User.Name;
    }
    interface UserwidgetsChangePassword {
        "state": model.State;
    }
    interface UserwidgetsDemo {
    }
    interface UserwidgetsLogin {
        "state": model.State;
    }
    interface UserwidgetsLoginDialog {
    }
    interface UserwidgetsLoginTrigger {
        "state": model.State;
    }
    interface UserwidgetsLogout {
        "state": model.State;
    }
    interface UserwidgetsMenu {
        "menuOpen": boolean;
    }
    interface UserwidgetsOrganizationPicker {
        "state": model.State;
    }
    interface UserwidgetsOrganizationUserRemove {
        "state": model.State;
        "user": model.userwidgets.User.Readable;
    }
    interface UserwidgetsRegister {
        "state": model.State;
    }
    interface UserwidgetsSetPassword {
        "user": model.userwidgets.User;
    }
    interface UserwidgetsUserList {
        "state": model.State;
    }
    interface UserwidgetsUserPermissionsUpdate {
        "label": string;
        "options"?: CustomOption[];
        "preventDefault": boolean;
        "state": model.State;
        "user": model.userwidgets.User.Readable;
    }
    interface UserwidgetsUserStatus {
        "state": model.State;
        "user": model.userwidgets.User.Readable;
    }
}
export interface UserwidgetsChangeNameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUserwidgetsChangeNameElement;
}
export interface UserwidgetsChangePasswordCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUserwidgetsChangePasswordElement;
}
export interface UserwidgetsLoginCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUserwidgetsLoginElement;
}
export interface UserwidgetsLoginDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUserwidgetsLoginDialogElement;
}
export interface UserwidgetsRegisterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUserwidgetsRegisterElement;
}
export interface UserwidgetsSetPasswordCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUserwidgetsSetPasswordElement;
}
export interface UserwidgetsUserPermissionsUpdateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUserwidgetsUserPermissionsUpdateElement;
}
declare global {
    interface HTMLUserwidgetsChangeNameElement extends Components.UserwidgetsChangeName, HTMLStencilElement {
    }
    var HTMLUserwidgetsChangeNameElement: {
        prototype: HTMLUserwidgetsChangeNameElement;
        new (): HTMLUserwidgetsChangeNameElement;
    };
    interface HTMLUserwidgetsChangePasswordElement extends Components.UserwidgetsChangePassword, HTMLStencilElement {
    }
    var HTMLUserwidgetsChangePasswordElement: {
        prototype: HTMLUserwidgetsChangePasswordElement;
        new (): HTMLUserwidgetsChangePasswordElement;
    };
    interface HTMLUserwidgetsDemoElement extends Components.UserwidgetsDemo, HTMLStencilElement {
    }
    var HTMLUserwidgetsDemoElement: {
        prototype: HTMLUserwidgetsDemoElement;
        new (): HTMLUserwidgetsDemoElement;
    };
    interface HTMLUserwidgetsLoginElement extends Components.UserwidgetsLogin, HTMLStencilElement {
    }
    var HTMLUserwidgetsLoginElement: {
        prototype: HTMLUserwidgetsLoginElement;
        new (): HTMLUserwidgetsLoginElement;
    };
    interface HTMLUserwidgetsLoginDialogElement extends Components.UserwidgetsLoginDialog, HTMLStencilElement {
    }
    var HTMLUserwidgetsLoginDialogElement: {
        prototype: HTMLUserwidgetsLoginDialogElement;
        new (): HTMLUserwidgetsLoginDialogElement;
    };
    interface HTMLUserwidgetsLoginTriggerElement extends Components.UserwidgetsLoginTrigger, HTMLStencilElement {
    }
    var HTMLUserwidgetsLoginTriggerElement: {
        prototype: HTMLUserwidgetsLoginTriggerElement;
        new (): HTMLUserwidgetsLoginTriggerElement;
    };
    interface HTMLUserwidgetsLogoutElement extends Components.UserwidgetsLogout, HTMLStencilElement {
    }
    var HTMLUserwidgetsLogoutElement: {
        prototype: HTMLUserwidgetsLogoutElement;
        new (): HTMLUserwidgetsLogoutElement;
    };
    interface HTMLUserwidgetsMenuElement extends Components.UserwidgetsMenu, HTMLStencilElement {
    }
    var HTMLUserwidgetsMenuElement: {
        prototype: HTMLUserwidgetsMenuElement;
        new (): HTMLUserwidgetsMenuElement;
    };
    interface HTMLUserwidgetsOrganizationPickerElement extends Components.UserwidgetsOrganizationPicker, HTMLStencilElement {
    }
    var HTMLUserwidgetsOrganizationPickerElement: {
        prototype: HTMLUserwidgetsOrganizationPickerElement;
        new (): HTMLUserwidgetsOrganizationPickerElement;
    };
    interface HTMLUserwidgetsOrganizationUserRemoveElement extends Components.UserwidgetsOrganizationUserRemove, HTMLStencilElement {
    }
    var HTMLUserwidgetsOrganizationUserRemoveElement: {
        prototype: HTMLUserwidgetsOrganizationUserRemoveElement;
        new (): HTMLUserwidgetsOrganizationUserRemoveElement;
    };
    interface HTMLUserwidgetsRegisterElement extends Components.UserwidgetsRegister, HTMLStencilElement {
    }
    var HTMLUserwidgetsRegisterElement: {
        prototype: HTMLUserwidgetsRegisterElement;
        new (): HTMLUserwidgetsRegisterElement;
    };
    interface HTMLUserwidgetsSetPasswordElement extends Components.UserwidgetsSetPassword, HTMLStencilElement {
    }
    var HTMLUserwidgetsSetPasswordElement: {
        prototype: HTMLUserwidgetsSetPasswordElement;
        new (): HTMLUserwidgetsSetPasswordElement;
    };
    interface HTMLUserwidgetsUserListElement extends Components.UserwidgetsUserList, HTMLStencilElement {
    }
    var HTMLUserwidgetsUserListElement: {
        prototype: HTMLUserwidgetsUserListElement;
        new (): HTMLUserwidgetsUserListElement;
    };
    interface HTMLUserwidgetsUserPermissionsUpdateElement extends Components.UserwidgetsUserPermissionsUpdate, HTMLStencilElement {
    }
    var HTMLUserwidgetsUserPermissionsUpdateElement: {
        prototype: HTMLUserwidgetsUserPermissionsUpdateElement;
        new (): HTMLUserwidgetsUserPermissionsUpdateElement;
    };
    interface HTMLUserwidgetsUserStatusElement extends Components.UserwidgetsUserStatus, HTMLStencilElement {
    }
    var HTMLUserwidgetsUserStatusElement: {
        prototype: HTMLUserwidgetsUserStatusElement;
        new (): HTMLUserwidgetsUserStatusElement;
    };
    interface HTMLElementTagNameMap {
        "userwidgets-change-name": HTMLUserwidgetsChangeNameElement;
        "userwidgets-change-password": HTMLUserwidgetsChangePasswordElement;
        "userwidgets-demo": HTMLUserwidgetsDemoElement;
        "userwidgets-login": HTMLUserwidgetsLoginElement;
        "userwidgets-login-dialog": HTMLUserwidgetsLoginDialogElement;
        "userwidgets-login-trigger": HTMLUserwidgetsLoginTriggerElement;
        "userwidgets-logout": HTMLUserwidgetsLogoutElement;
        "userwidgets-menu": HTMLUserwidgetsMenuElement;
        "userwidgets-organization-picker": HTMLUserwidgetsOrganizationPickerElement;
        "userwidgets-organization-user-remove": HTMLUserwidgetsOrganizationUserRemoveElement;
        "userwidgets-register": HTMLUserwidgetsRegisterElement;
        "userwidgets-set-password": HTMLUserwidgetsSetPasswordElement;
        "userwidgets-user-list": HTMLUserwidgetsUserListElement;
        "userwidgets-user-permissions-update": HTMLUserwidgetsUserPermissionsUpdateElement;
        "userwidgets-user-status": HTMLUserwidgetsUserStatusElement;
    }
}
declare namespace LocalJSX {
    interface UserwidgetsChangeName {
        "name"?: model.userwidgets.User.Name;
        "onNotice"?: (event: UserwidgetsChangeNameCustomEvent<Notice>) => void;
    }
    interface UserwidgetsChangePassword {
        "onNotice"?: (event: UserwidgetsChangePasswordCustomEvent<Notice>) => void;
        "state"?: model.State;
    }
    interface UserwidgetsDemo {
    }
    interface UserwidgetsLogin {
        "onLoggedIn"?: (event: UserwidgetsLoginCustomEvent<any>) => void;
        "state"?: model.State;
    }
    interface UserwidgetsLoginDialog {
        "onLogin"?: (event: UserwidgetsLoginDialogCustomEvent<model.userwidgets.User.Credentials>) => void;
        "onNotice"?: (event: UserwidgetsLoginDialogCustomEvent<Notice>) => void;
    }
    interface UserwidgetsLoginTrigger {
        "state"?: model.State;
    }
    interface UserwidgetsLogout {
        "state"?: model.State;
    }
    interface UserwidgetsMenu {
        "menuOpen"?: boolean;
    }
    interface UserwidgetsOrganizationPicker {
        "state"?: model.State;
    }
    interface UserwidgetsOrganizationUserRemove {
        "state"?: model.State;
        "user"?: model.userwidgets.User.Readable;
    }
    interface UserwidgetsRegister {
        "onNotice"?: (event: UserwidgetsRegisterCustomEvent<Notice>) => void;
        "state"?: model.State;
    }
    interface UserwidgetsSetPassword {
        "onNotice"?: (event: UserwidgetsSetPasswordCustomEvent<Notice>) => void;
        "user"?: model.userwidgets.User;
    }
    interface UserwidgetsUserList {
        "state"?: model.State;
    }
    interface UserwidgetsUserPermissionsUpdate {
        "label"?: string;
        "onUserPermissionUpdated"?: (event: UserwidgetsUserPermissionsUpdateCustomEvent<model.userwidgets.User.Permissions.Readable>) => void;
        "options"?: CustomOption[];
        "preventDefault"?: boolean;
        "state"?: model.State;
        "user"?: model.userwidgets.User.Readable;
    }
    interface UserwidgetsUserStatus {
        "state"?: model.State;
        "user"?: model.userwidgets.User.Readable;
    }
    interface IntrinsicElements {
        "userwidgets-change-name": UserwidgetsChangeName;
        "userwidgets-change-password": UserwidgetsChangePassword;
        "userwidgets-demo": UserwidgetsDemo;
        "userwidgets-login": UserwidgetsLogin;
        "userwidgets-login-dialog": UserwidgetsLoginDialog;
        "userwidgets-login-trigger": UserwidgetsLoginTrigger;
        "userwidgets-logout": UserwidgetsLogout;
        "userwidgets-menu": UserwidgetsMenu;
        "userwidgets-organization-picker": UserwidgetsOrganizationPicker;
        "userwidgets-organization-user-remove": UserwidgetsOrganizationUserRemove;
        "userwidgets-register": UserwidgetsRegister;
        "userwidgets-set-password": UserwidgetsSetPassword;
        "userwidgets-user-list": UserwidgetsUserList;
        "userwidgets-user-permissions-update": UserwidgetsUserPermissionsUpdate;
        "userwidgets-user-status": UserwidgetsUserStatus;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "userwidgets-change-name": LocalJSX.UserwidgetsChangeName & JSXBase.HTMLAttributes<HTMLUserwidgetsChangeNameElement>;
            "userwidgets-change-password": LocalJSX.UserwidgetsChangePassword & JSXBase.HTMLAttributes<HTMLUserwidgetsChangePasswordElement>;
            "userwidgets-demo": LocalJSX.UserwidgetsDemo & JSXBase.HTMLAttributes<HTMLUserwidgetsDemoElement>;
            "userwidgets-login": LocalJSX.UserwidgetsLogin & JSXBase.HTMLAttributes<HTMLUserwidgetsLoginElement>;
            "userwidgets-login-dialog": LocalJSX.UserwidgetsLoginDialog & JSXBase.HTMLAttributes<HTMLUserwidgetsLoginDialogElement>;
            "userwidgets-login-trigger": LocalJSX.UserwidgetsLoginTrigger & JSXBase.HTMLAttributes<HTMLUserwidgetsLoginTriggerElement>;
            "userwidgets-logout": LocalJSX.UserwidgetsLogout & JSXBase.HTMLAttributes<HTMLUserwidgetsLogoutElement>;
            "userwidgets-menu": LocalJSX.UserwidgetsMenu & JSXBase.HTMLAttributes<HTMLUserwidgetsMenuElement>;
            "userwidgets-organization-picker": LocalJSX.UserwidgetsOrganizationPicker & JSXBase.HTMLAttributes<HTMLUserwidgetsOrganizationPickerElement>;
            "userwidgets-organization-user-remove": LocalJSX.UserwidgetsOrganizationUserRemove & JSXBase.HTMLAttributes<HTMLUserwidgetsOrganizationUserRemoveElement>;
            "userwidgets-register": LocalJSX.UserwidgetsRegister & JSXBase.HTMLAttributes<HTMLUserwidgetsRegisterElement>;
            "userwidgets-set-password": LocalJSX.UserwidgetsSetPassword & JSXBase.HTMLAttributes<HTMLUserwidgetsSetPasswordElement>;
            "userwidgets-user-list": LocalJSX.UserwidgetsUserList & JSXBase.HTMLAttributes<HTMLUserwidgetsUserListElement>;
            "userwidgets-user-permissions-update": LocalJSX.UserwidgetsUserPermissionsUpdate & JSXBase.HTMLAttributes<HTMLUserwidgetsUserPermissionsUpdateElement>;
            "userwidgets-user-status": LocalJSX.UserwidgetsUserStatus & JSXBase.HTMLAttributes<HTMLUserwidgetsUserStatusElement>;
        }
    }
}
